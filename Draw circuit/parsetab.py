
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AC ARROW COLON COMMA DIVIDE EQUALS IDENTIFIER LBRACE LET LPAREN MINUS NUMBER OP PARALLEL PLUS RBRACE RPAREN SEMICOLON SERIES SUBCIRCUIT TIMES TRANSIENTprogram : statementsstatements : statement\n                  | statements statementstatement : component_decl\n                 | let_statementlet_statement : LET IDENTIFIER EQUALS expression\n                     | LET IDENTIFIER EQUALS expression COMMA IDENTIFIER EQUALS expressioncomponent_decl : IDENTIFIER EQUALS component_value\n                      | IDENTIFIER EQUALS component_value COLON node_ref COMMA node_refcomponent_value : IDENTIFIER\n                       | NUMBERnode_ref : IDENTIFIERexpression : term\n                  | expression PLUS term\n                  | expression MINUS termterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | IDENTIFIER\n              | LPAREN expression RPAREN\n              | PLUS factor\n              | MINUS factor'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,34,36,37,38,39,40,41,42,43,],[6,6,-2,-4,-5,10,-3,11,-10,-8,-11,16,24,-20,-6,-13,16,16,-16,-19,16,-12,35,16,16,16,16,-22,-23,24,-14,-15,-17,-18,-21,-9,16,-7,]),'LET':([0,2,3,4,5,8,11,12,13,16,17,18,21,22,24,31,32,36,37,38,39,40,41,43,],[7,7,-2,-4,-5,-3,-10,-8,-11,-20,-6,-13,-16,-19,-12,-22,-23,-14,-15,-17,-18,-21,-9,-7,]),'$end':([1,2,3,4,5,8,11,12,13,16,17,18,21,22,24,31,32,36,37,38,39,40,41,43,],[0,-1,-2,-4,-5,-3,-10,-8,-11,-20,-6,-13,-16,-19,-12,-22,-23,-14,-15,-17,-18,-21,-9,-7,]),'EQUALS':([6,10,35,],[9,14,42,]),'NUMBER':([9,14,19,20,23,27,28,29,30,42,],[13,22,22,22,22,22,22,22,22,22,]),'COLON':([11,12,13,],[-10,15,-11,]),'LPAREN':([14,19,20,23,27,28,29,30,42,],[23,23,23,23,23,23,23,23,23,]),'PLUS':([14,16,17,18,19,20,21,22,23,27,28,29,30,31,32,33,36,37,38,39,40,42,43,],[19,-20,27,-13,19,19,-16,-19,19,19,19,19,19,-22,-23,27,-14,-15,-17,-18,-21,19,27,]),'MINUS':([14,16,17,18,19,20,21,22,23,27,28,29,30,31,32,33,36,37,38,39,40,42,43,],[20,-20,28,-13,20,20,-16,-19,20,20,20,20,20,-22,-23,28,-14,-15,-17,-18,-21,20,28,]),'TIMES':([16,18,21,22,31,32,36,37,38,39,40,],[-20,29,-16,-19,-22,-23,29,29,-17,-18,-21,]),'DIVIDE':([16,18,21,22,31,32,36,37,38,39,40,],[-20,30,-16,-19,-22,-23,30,30,-17,-18,-21,]),'COMMA':([16,17,18,21,22,24,25,31,32,36,37,38,39,40,],[-20,26,-13,-16,-19,-12,34,-22,-23,-14,-15,-17,-18,-21,]),'RPAREN':([16,18,21,22,31,32,33,36,37,38,39,40,],[-20,-13,-16,-19,-22,-23,40,-14,-15,-17,-18,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,8,]),'component_decl':([0,2,],[4,4,]),'let_statement':([0,2,],[5,5,]),'component_value':([9,],[12,]),'expression':([14,23,42,],[17,33,43,]),'term':([14,23,27,28,42,],[18,18,36,37,18,]),'factor':([14,19,20,23,27,28,29,30,42,],[21,31,32,21,21,21,38,39,21,]),'node_ref':([15,34,],[25,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','draw.py',95),
  ('statements -> statement','statements',1,'p_statements','draw.py',99),
  ('statements -> statements statement','statements',2,'p_statements','draw.py',100),
  ('statement -> component_decl','statement',1,'p_statement','draw.py',107),
  ('statement -> let_statement','statement',1,'p_statement','draw.py',108),
  ('let_statement -> LET IDENTIFIER EQUALS expression','let_statement',4,'p_let_statement','draw.py',112),
  ('let_statement -> LET IDENTIFIER EQUALS expression COMMA IDENTIFIER EQUALS expression','let_statement',8,'p_let_statement','draw.py',113),
  ('component_decl -> IDENTIFIER EQUALS component_value','component_decl',3,'p_component_decl','draw.py',120),
  ('component_decl -> IDENTIFIER EQUALS component_value COLON node_ref COMMA node_ref','component_decl',7,'p_component_decl','draw.py',121),
  ('component_value -> IDENTIFIER','component_value',1,'p_component_value','draw.py',129),
  ('component_value -> NUMBER','component_value',1,'p_component_value','draw.py',130),
  ('node_ref -> IDENTIFIER','node_ref',1,'p_node_ref','draw.py',134),
  ('expression -> term','expression',1,'p_expression','draw.py',138),
  ('expression -> expression PLUS term','expression',3,'p_expression','draw.py',139),
  ('expression -> expression MINUS term','expression',3,'p_expression','draw.py',140),
  ('term -> factor','term',1,'p_term','draw.py',147),
  ('term -> term TIMES factor','term',3,'p_term','draw.py',148),
  ('term -> term DIVIDE factor','term',3,'p_term','draw.py',149),
  ('factor -> NUMBER','factor',1,'p_factor','draw.py',156),
  ('factor -> IDENTIFIER','factor',1,'p_factor','draw.py',157),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','draw.py',158),
  ('factor -> PLUS factor','factor',2,'p_factor','draw.py',159),
  ('factor -> MINUS factor','factor',2,'p_factor','draw.py',160),
]
